// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AdherenceHistory Screen renders correctly 1`] = `
<View
  style={
    Object {
      "backgroundColor": "white",
      "height": "100%",
    }
  }
>
  <Modal
    animationType="fade"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    style={
      Object {
        "backgroundColor": "white",
      }
    }
    transparent={true}
    visible={false}
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "rgba(52, 52, 52, 0.8)",
          "height": "100%",
          "justifyContent": "center",
        }
      }
    >
      <Carousel
        activeAnimationOptions={null}
        activeAnimationType="timing"
        activeSlideAlignment="center"
        activeSlideOffset={20}
        apparitionDelay={0}
        autoplay={false}
        autoplayDelay={1000}
        autoplayInterval={3000}
        callbackOffsetMargin={5}
        containerCustomStyle={Object {}}
        contentContainerCustomStyle={Object {}}
        data={Array []}
        enableMomentum={false}
        enableSnap={true}
        firstItem={0}
        hasParallaxImages={false}
        inactiveSlideOpacity={0.7}
        inactiveSlideScale={0.9}
        inactiveSlideShift={0}
        itemWidth={600}
        layout="stack"
        lockScrollTimeoutDuration={1000}
        lockScrollWhileSnapping={false}
        loop={false}
        loopClonesPerSide={3}
        onSnapToItem={[Function]}
        renderItem={[Function]}
        scrollEnabled={true}
        shouldOptimizeUpdates={true}
        slideStyle={Object {}}
        sliderWidth={660}
        swipeThreshold={20}
        useScrollView={false}
        vertical={false}
      />
      <Pagination
        activeDotIndex={0}
        animatedDuration={250}
        animatedFriction={4}
        animatedTension={50}
        containerStyle={
          Object {
            "backgroundColor": "rgba(0, 0, 0, 0.75)",
            "borderRadius": 20,
            "bottom": "28%",
            "position": "relative",
          }
        }
        delayPressInDot={0}
        dotStyle={
          Object {
            "backgroundColor": "rgba(255, 255, 255, 0.92)",
            "borderRadius": 5,
            "height": 10,
            "marginHorizontal": 8,
            "width": 10,
          }
        }
        dotsLength={0}
        inactiveDotOpacity={0.4}
        inactiveDotScale={0.6}
        inactiveDotStyle={
          Object {
            "backgroundColor": "red",
          }
        }
        tappableDots={false}
        vertical={false}
      />
    </View>
  </Modal>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "grey",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "padding": 15,
      }
    }
  >
    <Text
      style={
        Object {
          "color": "white",
          "fontWeight": "800",
        }
      }
    >
      Syncing Data
    </Text>
    <CircleSnail
      animating={true}
      color={
        Array [
          "white",
        ]
      }
      direction="counter-clockwise"
      hidesWhenStopped={false}
      size={30}
      spinDuration={400}
      strokeCap="round"
      thickness={3}
      useNativeDriver={false}
    />
  </View>
  <View
    style={
      Object {
        "flexDirection": "row",
      }
    }
  >
    <View
      style={
        Object {
          "borderColor": "lightgrey",
          "borderEndWidth": 1,
          "width": "100%",
        }
      }
    >
      <Picker
        id="picker1"
        mode="dropdown"
        onValueChange={[Function]}
        style={
          Object {
            "backgroundColor": "white",
            "borderColor": "lightgrey",
            "borderWidth": 3,
            "color": "black",
            "elevation": 3,
          }
        }
      >
        <PickerItem
          key="PCM"
          label="PCM"
          value="PCM"
        />
      </Picker>
    </View>
  </View>
  <View
    style={
      Object {
        "flexDirection": "row",
        "justifyContent": "space-between",
        "padding": 7,
      }
    }
  >
    <View
      style={
        Object {
          "left": 10,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "black",
            "fontSize": 18,
            "marginTop": 30,
          }
        }
      >
        Overall Performance 
      </Text>
    </View>
    <View
      style={
        Object {
          "alignItems": "center",
          "margin": 10,
          "paddingRight": 20,
        }
      }
    >
      <PercentageCircle
        bgColor="#fff"
        borderWidth={3}
        color="#4dd0e1"
        containerStyle={null}
        percent={NaN}
        radius={35}
        shadowColor="#999"
      >
        <Text
          style={
            Object {
              "color": "#4dd0e1",
              "fontSize": 18,
            }
          }
        >
          NaN%
        </Text>
      </PercentageCircle>
    </View>
  </View>
  <Themed.Divider />
  <View
    style={
      Object {
        "backgroundColor": "lightgrey",
        "marginBottom": 5,
        "padding": 15,
      }
    }
  >
    <Text
      style={
        Object {
          "fontWeight": "600",
        }
      }
    >
       Detailed Report
    </Text>
  </View>
  <FlatList
    data={Array []}
    renderItem={[Function]}
  />
  <Themed.Button
    buttonStyle={
      Object {
        "backgroundColor": "#3743ab",
      }
    }
    disabled={true}
    id="perm"
    onPress={[Function]}
    title="Download PDF"
  />
</View>
`;
